// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CustomTranslator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Contains the required details of a Translator Studio Test
    /// </summary>
    public partial class TextTranslatorModelsTextTranslatorTestInfo
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsTextTranslatorTestInfo class.
        /// </summary>
        public TextTranslatorModelsTextTranslatorTestInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsTextTranslatorTestInfo class.
        /// </summary>
        /// <param name="id">Gets or sets Id</param>
        /// <param name="name">The Name of this test</param>
        /// <param name="modelId">The Model with which the test is
        /// associated</param>
        /// <param name="status">The test status. Possible values include:
        /// 'none', 'starting', 'deploying', 'testing', 'complete'</param>
        /// <param name="createdBy">Gets the Name of the creator of this
        /// test.</param>
        /// <param name="modifiedBy">Gets the Name of who last modified this
        /// model.</param>
        /// <param name="baselineBleuScorePunctuated">Gets or sets baseline
        /// BleuScore (case-sensitive, punctuated).</param>
        /// <param name="bleuScorePunctuated">Gets or sets BleuScore
        /// (case-sensitive, punctuated).</param>
        /// <param name="baselineBleuScoreUnpunctuated">Gets or sets baseline
        /// BleuScore (case-sensitive, Unpunctuated).</param>
        /// <param name="bleuScoreUnpunctuated">Gets or sets BleuScore
        /// (case-sensitive, Unpunctuated).</param>
        /// <param name="baselineBleuScoreCIPunctuated">Gets or sets baseline
        /// BleuScore (case-insensitive, punctuated).</param>
        /// <param name="bleuScoreCIPunctuated">Gets or sets BleuScore
        /// (case-insensitive, punctuated).</param>
        /// <param name="baselineBleuScoreCIUnpunctuated">Gets or sets baseline
        /// BleuScore (case-insensitive, Unpunctuated).</param>
        /// <param name="bleuScoreCIUnpunctuated">Gets or sets BleuScore
        /// (case-insensitive, Unpunctuated).</param>
        /// <param name="sentenceCount">The SentenceCount of the test</param>
        public TextTranslatorModelsTextTranslatorTestInfo(long id, string name, long modelId, string status, TextTranslatorModelsResponseUserInfo createdBy, TextTranslatorModelsResponseUserInfo modifiedBy, double? baselineBleuScorePunctuated = default(double?), double? bleuScorePunctuated = default(double?), double? baselineBleuScoreUnpunctuated = default(double?), double? bleuScoreUnpunctuated = default(double?), double? baselineBleuScoreCIPunctuated = default(double?), double? bleuScoreCIPunctuated = default(double?), double? baselineBleuScoreCIUnpunctuated = default(double?), double? bleuScoreCIUnpunctuated = default(double?), int? sentenceCount = default(int?))
        {
            Id = id;
            Name = name;
            ModelId = modelId;
            Status = status;
            BaselineBleuScorePunctuated = baselineBleuScorePunctuated;
            BleuScorePunctuated = bleuScorePunctuated;
            BaselineBleuScoreUnpunctuated = baselineBleuScoreUnpunctuated;
            BleuScoreUnpunctuated = bleuScoreUnpunctuated;
            BaselineBleuScoreCIPunctuated = baselineBleuScoreCIPunctuated;
            BleuScoreCIPunctuated = bleuScoreCIPunctuated;
            BaselineBleuScoreCIUnpunctuated = baselineBleuScoreCIUnpunctuated;
            BleuScoreCIUnpunctuated = bleuScoreCIUnpunctuated;
            SentenceCount = sentenceCount;
            CreatedBy = createdBy;
            ModifiedBy = modifiedBy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets Id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long Id { get; set; }

        /// <summary>
        /// Gets or sets the Name of this test
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Model with which the test is associated
        /// </summary>
        [JsonProperty(PropertyName = "modelId")]
        public long ModelId { get; set; }

        /// <summary>
        /// Gets or sets the test status. Possible values include: 'none',
        /// 'starting', 'deploying', 'testing', 'complete'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets baseline BleuScore (case-sensitive, punctuated).
        /// </summary>
        [JsonProperty(PropertyName = "baselineBleuScorePunctuated")]
        public double? BaselineBleuScorePunctuated { get; set; }

        /// <summary>
        /// Gets or sets BleuScore (case-sensitive, punctuated).
        /// </summary>
        [JsonProperty(PropertyName = "bleuScorePunctuated")]
        public double? BleuScorePunctuated { get; set; }

        /// <summary>
        /// Gets or sets baseline BleuScore (case-sensitive, Unpunctuated).
        /// </summary>
        [JsonProperty(PropertyName = "baselineBleuScoreUnpunctuated")]
        public double? BaselineBleuScoreUnpunctuated { get; set; }

        /// <summary>
        /// Gets or sets BleuScore (case-sensitive, Unpunctuated).
        /// </summary>
        [JsonProperty(PropertyName = "bleuScoreUnpunctuated")]
        public double? BleuScoreUnpunctuated { get; set; }

        /// <summary>
        /// Gets or sets baseline BleuScore (case-insensitive, punctuated).
        /// </summary>
        [JsonProperty(PropertyName = "baselineBleuScoreCIPunctuated")]
        public double? BaselineBleuScoreCIPunctuated { get; set; }

        /// <summary>
        /// Gets or sets BleuScore (case-insensitive, punctuated).
        /// </summary>
        [JsonProperty(PropertyName = "bleuScoreCIPunctuated")]
        public double? BleuScoreCIPunctuated { get; set; }

        /// <summary>
        /// Gets or sets baseline BleuScore (case-insensitive, Unpunctuated).
        /// </summary>
        [JsonProperty(PropertyName = "baselineBleuScoreCIUnpunctuated")]
        public double? BaselineBleuScoreCIUnpunctuated { get; set; }

        /// <summary>
        /// Gets or sets BleuScore (case-insensitive, Unpunctuated).
        /// </summary>
        [JsonProperty(PropertyName = "bleuScoreCIUnpunctuated")]
        public double? BleuScoreCIUnpunctuated { get; set; }

        /// <summary>
        /// Gets or sets the SentenceCount of the test
        /// </summary>
        [JsonProperty(PropertyName = "sentenceCount")]
        public int? SentenceCount { get; set; }

        /// <summary>
        /// Gets the Name of the creator of this test.
        /// </summary>
        [JsonProperty(PropertyName = "createdBy")]
        public TextTranslatorModelsResponseUserInfo CreatedBy { get; set; }

        /// <summary>
        /// Gets the Name of who last modified this model.
        /// </summary>
        [JsonProperty(PropertyName = "modifiedBy")]
        public TextTranslatorModelsResponseUserInfo ModifiedBy { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (CreatedBy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CreatedBy");
            }
            if (ModifiedBy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ModifiedBy");
            }
            if (CreatedBy != null)
            {
                CreatedBy.Validate();
            }
            if (ModifiedBy != null)
            {
                ModifiedBy.Validate();
            }
        }
    }
}
