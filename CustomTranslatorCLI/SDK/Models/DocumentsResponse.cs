// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CustomTranslator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// API results container for TextTranslatorDocuments.
    /// </summary>
    public partial class DocumentsResponse
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsResponseTextTranslatorDocumentsResponse class.
        /// </summary>
        public DocumentsResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsResponseTextTranslatorDocumentsResponse class.
        /// </summary>
        /// <param name="paginatedDocuments">Gets or sets the document response
        /// (includes pagination).</param>
        public DocumentsResponse(DocumentInfoResponse paginatedDocuments, BaseDocumentResponse allDocuments = default(BaseDocumentResponse))
        {
            PaginatedDocuments = paginatedDocuments;
            AllDocuments = allDocuments;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the document response (includes pagination).
        /// </summary>
        [JsonProperty(PropertyName = "paginatedDocuments")]
        public DocumentInfoResponse PaginatedDocuments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allDocuments")]
        public BaseDocumentResponse AllDocuments { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PaginatedDocuments == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PaginatedDocuments");
            }
            if (PaginatedDocuments != null)
            {
                PaginatedDocuments.Validate();
            }
        }
    }
}
