// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CustomTranslator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines a language that can be used in the text translator.
    /// </summary>
    public partial class TextTranslatorModelsTextTranslatorLanguage
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsTextTranslatorLanguage class.
        /// </summary>
        public TextTranslatorModelsTextTranslatorLanguage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsTextTranslatorLanguage class.
        /// </summary>
        /// <param name="id">The Id of the language</param>
        /// <param name="displayName">The Display Name of the language</param>
        /// <param name="languageCode">The ISO code of the language</param>
        public TextTranslatorModelsTextTranslatorLanguage(long id, string displayName, string languageCode)
        {
            Id = id;
            DisplayName = displayName;
            LanguageCode = languageCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Id of the language
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long Id { get; set; }

        /// <summary>
        /// Gets or sets the Display Name of the language
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the ISO code of the language
        /// </summary>
        [JsonProperty(PropertyName = "languageCode")]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (LanguageCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LanguageCode");
            }
        }
    }
}
