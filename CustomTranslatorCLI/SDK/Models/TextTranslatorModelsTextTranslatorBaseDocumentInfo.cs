// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CustomTranslator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Class containing base information about a document. Used for
    /// select all/none functionality on the front end.
    /// </summary>
    public partial class TextTranslatorModelsTextTranslatorBaseDocumentInfo
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsTextTranslatorBaseDocumentInfo class.
        /// </summary>
        public TextTranslatorModelsTextTranslatorBaseDocumentInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsTextTranslatorBaseDocumentInfo class.
        /// </summary>
        /// <param name="id">Gets or sets Id</param>
        /// <param name="documentType">Gets or sets the DocumentType. Possible
        /// values include: 'none', 'training', 'testing', 'tuning',
        /// 'phraseDictionary', 'sentenceDictionary'</param>
        /// <param name="extractedSentenceCount">Gets or sets extracted
        /// sentence count.</param>
        /// <param name="characterCount">Gets or sets character count.</param>
        /// <param name="usedByPrioritizedModel">Gets or sets if this model is
        /// used by the specified prioritized model</param>
        public TextTranslatorModelsTextTranslatorBaseDocumentInfo(long id, string documentType, long extractedSentenceCount, long characterCount, bool? usedByPrioritizedModel = default(bool?))
        {
            Id = id;
            DocumentType = documentType;
            ExtractedSentenceCount = extractedSentenceCount;
            CharacterCount = characterCount;
            UsedByPrioritizedModel = usedByPrioritizedModel;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets Id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long Id { get; set; }

        /// <summary>
        /// Gets or sets the DocumentType. Possible values include: 'none',
        /// 'training', 'testing', 'tuning', 'phraseDictionary',
        /// 'sentenceDictionary'
        /// </summary>
        [JsonProperty(PropertyName = "documentType")]
        public string DocumentType { get; set; }

        /// <summary>
        /// Gets or sets extracted sentence count.
        /// </summary>
        [JsonProperty(PropertyName = "extractedSentenceCount")]
        public long ExtractedSentenceCount { get; set; }

        /// <summary>
        /// Gets or sets character count.
        /// </summary>
        [JsonProperty(PropertyName = "characterCount")]
        public long CharacterCount { get; set; }

        /// <summary>
        /// Gets or sets if this model is used by the specified prioritized
        /// model
        /// </summary>
        [JsonProperty(PropertyName = "usedByPrioritizedModel")]
        public bool? UsedByPrioritizedModel { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DocumentType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DocumentType");
            }
        }
    }
}
