// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CustomTranslator.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Text Translator Import Job File Status
    /// </summary>
    public partial class ImportJobFileStatusInfo
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorApiModelsResponseTextTranslatorImportJobFileStatusInfo
        /// class.
        /// </summary>
        public ImportJobFileStatusInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorApiModelsResponseTextTranslatorImportJobFileStatusInfo
        /// class.
        /// </summary>
        /// <param name="status">Gets or sets the status.</param>
        /// <param name="modifiedDate">Gets or sets the date the upload status
        /// was last modified</param>
        /// <param name="fileName">Gets or sets the name of the file.</param>
        /// <param name="documentName">Gets or sets the name of the
        /// document.</param>
        /// <param name="summary">Gets or sets the summary.</param>
        /// <param name="id">Gets or sets the identifier.</param>
        /// <param name="parentId">Gets or sets the parent identifier.</param>
        /// <param name="language">Gets or sets the file language associated
        /// with the document.</param>
        public ImportJobFileStatusInfo(ImportJobStatus status = default(ImportJobStatus), System.DateTime? modifiedDate = default(System.DateTime?), string fileName = default(string), string documentName = default(string), string summary = default(string), int? id = default(int?), int? parentId = default(int?), TranslatorLanguage language = default(TranslatorLanguage))
        {
            Status = status;
            ModifiedDate = modifiedDate;
            FileName = fileName;
            DocumentName = documentName;
            Summary = summary;
            Id = id;
            ParentId = parentId;
            Language = language;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the status.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public ImportJobStatus Status { get; set; }

        /// <summary>
        /// Gets or sets the date the upload status was last modified
        /// </summary>
        [JsonProperty(PropertyName = "modifiedDate")]
        public System.DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or sets the name of the file.
        /// </summary>
        [JsonProperty(PropertyName = "fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets the name of the document.
        /// </summary>
        [JsonProperty(PropertyName = "documentName")]
        public string DocumentName { get; set; }

        /// <summary>
        /// Gets or sets the summary.
        /// </summary>
        [JsonProperty(PropertyName = "summary")]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or sets the parent identifier.
        /// </summary>
        [JsonProperty(PropertyName = "parentId")]
        public int? ParentId { get; set; }

        /// <summary>
        /// Gets or sets the file language associated with the document.
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public TranslatorLanguage Language { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Status != null)
            {
                Status.Validate();
            }
            if (Language != null)
            {
                Language.Validate();
            }
        }
    }
}
