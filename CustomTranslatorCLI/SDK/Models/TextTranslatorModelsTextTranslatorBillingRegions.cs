// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CustomTranslator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines the a billing region
    /// </summary>
    public partial class TextTranslatorModelsTextTranslatorBillingRegions
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsTextTranslatorBillingRegions class.
        /// </summary>
        public TextTranslatorModelsTextTranslatorBillingRegions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsTextTranslatorBillingRegions class.
        /// </summary>
        /// <param name="billingRegionCode">Gets or sets the billing region
        /// (GBL, USW2, etc)</param>
        /// <param name="billingRegionName">Gets or sets the billing region
        /// name (Global, US West 2, etc)</param>
        public TextTranslatorModelsTextTranslatorBillingRegions(string billingRegionCode, string billingRegionName)
        {
            BillingRegionCode = billingRegionCode;
            BillingRegionName = billingRegionName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the billing region (GBL, USW2, etc)
        /// </summary>
        [JsonProperty(PropertyName = "billingRegionCode")]
        public string BillingRegionCode { get; set; }

        /// <summary>
        /// Gets or sets the billing region name (Global, US West 2, etc)
        /// </summary>
        [JsonProperty(PropertyName = "billingRegionName")]
        public string BillingRegionName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BillingRegionCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BillingRegionCode");
            }
            if (BillingRegionName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BillingRegionName");
            }
        }
    }
}
