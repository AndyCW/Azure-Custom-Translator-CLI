// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CustomTranslator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ErrorContent
    /// </summary>
    /// <remarks>
    /// The interface represents the content of an error response defined in
    /// the OneAPI v2.1 documentation.
    /// </remarks>
    public partial class ErrorContent
    {
        /// <summary>
        /// Initializes a new instance of the ErrorContent class.
        /// </summary>
        public ErrorContent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ErrorContent class.
        /// </summary>
        /// <param name="code">A service-defined error code that should be
        /// human-readable.
        /// This code serves as a more specific indicator of the error than
        /// the HTTP error code specified in the response</param>
        /// <param name="message">A human-readable representation of the error.
        /// It is intended as
        /// an aid to developers and is not suitable for exposure to end
        /// users</param>
        /// <param name="details">An array of details representing distinct
        /// related errors that occured during the request</param>
        /// <param name="innererror">The stack trace of the error. The payload
        /// is service-defined.
        /// If the error is not at the root level, the object contains a Code
        /// and an InnerError property</param>
        /// <param name="target">The target of the particular error (e.g., the
        /// name of the property in error)</param>
        public ErrorContent(string code, string message, IList<ErrorDetail> details = default(IList<ErrorDetail>), InnerError innererror = default(InnerError), string target = default(string))
        {
            Details = details;
            Innererror = innererror;
            Code = code;
            Message = message;
            Target = target;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets an array of details representing distinct related
        /// errors that occured during the request
        /// </summary>
        [JsonProperty(PropertyName = "details")]
        public IList<ErrorDetail> Details { get; set; }

        /// <summary>
        /// Gets or sets the stack trace of the error. The payload is
        /// service-defined.
        /// If the error is not at the root level, the object contains a Code
        /// and an InnerError property
        /// </summary>
        [JsonProperty(PropertyName = "innererror")]
        public InnerError Innererror { get; set; }

        /// <summary>
        /// Gets or sets a service-defined error code that should be
        /// human-readable.
        /// This code serves as a more specific indicator of the error than
        /// the HTTP error code specified in the response
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets a human-readable representation of the error. It is
        /// intended as
        /// an aid to developers and is not suitable for exposure to end users
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets the target of the particular error (e.g., the name of
        /// the property in error)
        /// </summary>
        [JsonProperty(PropertyName = "target")]
        public string Target { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Code");
            }
            if (Message == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Message");
            }
            if (Details != null)
            {
                foreach (var element in Details)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
