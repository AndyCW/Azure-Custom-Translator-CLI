// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CustomTranslator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Contains the update model information.
    /// </summary>
    public partial class TextTranslatorModelsResponseTextTranslatorModelUpdateResponse
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsResponseTextTranslatorModelUpdateResponse
        /// class.
        /// </summary>
        public TextTranslatorModelsResponseTextTranslatorModelUpdateResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsResponseTextTranslatorModelUpdateResponse
        /// class.
        /// </summary>
        /// <param name="name">Gets or sets the updated model name.</param>
        /// <param name="documents">Gets or sets the ids used by the
        /// model</param>
        public TextTranslatorModelsResponseTextTranslatorModelUpdateResponse(string name, IList<long?> documents)
        {
            Name = name;
            Documents = documents;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the updated model name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the ids used by the model
        /// </summary>
        [JsonProperty(PropertyName = "documents")]
        public IList<long?> Documents { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Documents == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Documents");
            }
        }
    }
}
