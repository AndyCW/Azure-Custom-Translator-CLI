// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CustomTranslator.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MicrosoftAspNetCoreHttpIFormFile
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftAspNetCoreHttpIFormFile
        /// class.
        /// </summary>
        public MicrosoftAspNetCoreHttpIFormFile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftAspNetCoreHttpIFormFile
        /// class.
        /// </summary>
        public MicrosoftAspNetCoreHttpIFormFile(string contentType = default(string), string contentDisposition = default(string), IDictionary<string, IList<string>> headers = default(IDictionary<string, IList<string>>), long? length = default(long?), string name = default(string), string fileName = default(string))
        {
            ContentType = contentType;
            ContentDisposition = contentDisposition;
            Headers = headers;
            Length = length;
            Name = name;
            FileName = fileName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contentType")]
        public string ContentType { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contentDisposition")]
        public string ContentDisposition { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "headers")]
        public IDictionary<string, IList<string>> Headers { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "length")]
        public long? Length { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileName")]
        public string FileName { get; private set; }

    }
}
