// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CustomTranslator.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ImportAllJobsStatusResponse
    /// </summary>
    public partial class TextTranslatorModelsResponseTextTranslatorImportAllJobsStatusInfo
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsResponseTextTranslatorImportAllJobsStatusInfo
        /// class.
        /// </summary>
        public TextTranslatorModelsResponseTextTranslatorImportAllJobsStatusInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// TextTranslatorModelsResponseTextTranslatorImportAllJobsStatusInfo
        /// class.
        /// </summary>
        /// <param name="jobId">Relevant job id.</param>
        /// <param name="numberFiles">The number of files represented by this
        /// job id. The parent placeholder
        /// for .zip and .tmx files is only included in this count if it is the
        /// only
        /// item listed in UploadHistory for the job.</param>
        /// <param name="numberFilesWithErrors">The number of files represented
        /// by this job id that have failed. The
        /// parent placeholder for .zip and .tmx files is only included in this
        /// count
        /// if it is the only item listed in UploadHistory for the job.</param>
        /// <param name="name">Display name of the job. For .zip/ .tmx files,
        /// this is name + extension
        /// of the parent item. For parallel data this "DocumentName" row
        /// in the UploadHistory table.</param>
        /// <param name="status">Overall status for the job. Status is set to
        /// failed if any items in
        /// this job have failed. If no items have failed, it is determined by
        /// the item with the lowest UploadStatus value.</param>
        /// <param name="documentType">The type of document uploaded by this
        /// job (ex: training, tuning, testing). Possible values include:
        /// 'none', 'training', 'testing', 'tuning', 'phraseDictionary',
        /// 'sentenceDictionary'</param>
        /// <param name="createdDate">Job creation date.</param>
        /// <param name="createdBy">Information about who uploaded the document
        /// (id, display name).</param>
        /// <param name="languages">The file languages associated with this
        /// document.</param>
        public TextTranslatorModelsResponseTextTranslatorImportAllJobsStatusInfo(System.Guid? jobId = default(System.Guid?), int? numberFiles = default(int?), int? numberFilesWithErrors = default(int?), string name = default(string), TextTranslatorModelsTextTranslatorImportJobStatus status = default(TextTranslatorModelsTextTranslatorImportJobStatus), string documentType = default(string), System.DateTime? createdDate = default(System.DateTime?), TextTranslatorModelsResponseUserInfo createdBy = default(TextTranslatorModelsResponseUserInfo), IList<TextTranslatorModelsTextTranslatorLanguage> languages = default(IList<TextTranslatorModelsTextTranslatorLanguage>))
        {
            JobId = jobId;
            NumberFiles = numberFiles;
            NumberFilesWithErrors = numberFilesWithErrors;
            Name = name;
            Status = status;
            DocumentType = documentType;
            CreatedDate = createdDate;
            CreatedBy = createdBy;
            Languages = languages;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets relevant job id.
        /// </summary>
        [JsonProperty(PropertyName = "jobId")]
        public System.Guid? JobId { get; set; }

        /// <summary>
        /// Gets or sets the number of files represented by this job id. The
        /// parent placeholder
        /// for .zip and .tmx files is only included in this count if it is the
        /// only
        /// item listed in UploadHistory for the job.
        /// </summary>
        [JsonProperty(PropertyName = "numberFiles")]
        public int? NumberFiles { get; set; }

        /// <summary>
        /// Gets or sets the number of files represented by this job id that
        /// have failed. The
        /// parent placeholder for .zip and .tmx files is only included in this
        /// count
        /// if it is the only item listed in UploadHistory for the job.
        /// </summary>
        [JsonProperty(PropertyName = "numberFilesWithErrors")]
        public int? NumberFilesWithErrors { get; set; }

        /// <summary>
        /// Gets or sets display name of the job. For .zip/ .tmx files, this is
        /// name + extension
        /// of the parent item. For parallel data this "DocumentName" row
        /// in the UploadHistory table.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets overall status for the job. Status is set to failed if
        /// any items in
        /// this job have failed. If no items have failed, it is determined by
        /// the item with the lowest UploadStatus value.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public TextTranslatorModelsTextTranslatorImportJobStatus Status { get; set; }

        /// <summary>
        /// Gets or sets the type of document uploaded by this job (ex:
        /// training, tuning, testing). Possible values include: 'none',
        /// 'training', 'testing', 'tuning', 'phraseDictionary',
        /// 'sentenceDictionary'
        /// </summary>
        [JsonProperty(PropertyName = "documentType")]
        public string DocumentType { get; set; }

        /// <summary>
        /// Gets or sets job creation date.
        /// </summary>
        [JsonProperty(PropertyName = "createdDate")]
        public System.DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or sets information about who uploaded the document (id,
        /// display name).
        /// </summary>
        [JsonProperty(PropertyName = "createdBy")]
        public TextTranslatorModelsResponseUserInfo CreatedBy { get; set; }

        /// <summary>
        /// Gets the file languages associated with this document.
        /// </summary>
        [JsonProperty(PropertyName = "languages")]
        public IList<TextTranslatorModelsTextTranslatorLanguage> Languages { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Status != null)
            {
                Status.Validate();
            }
            if (CreatedBy != null)
            {
                CreatedBy.Validate();
            }
            if (Languages != null)
            {
                foreach (var element in Languages)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
