// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CustomTranslator
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Documentation for the Microsoft Custom Translator API&lt;br/&gt;C# code
    /// sample:
    /// https://github.com/MicrosoftTranslator/CustomTranslator-API-CSharp
    /// </summary>
    public partial interface IMicrosoftCustomTranslatorAPIPreview10 : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Gets the list of categories that can be assigned to the project.
        /// </summary>
        /// <param name='authorization'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TranslatorCategory>>> GetCategoriesWithHttpMessagesAsync(string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the documents.
        /// </summary>
        /// <remarks>
        /// ### REMARKS ###
        /// Documents can be filtered using standard OData $filter syntax.
        /// Supported fields and operations:
        /// - Name - document name to filter by. Supported operations are 'eq'
        /// and 'substringof'.
        /// - DocumentType - Document type filter. Supported operations are
        /// 'eq'.
        /// - LanguageCode - Language code filter. Supported operations are
        /// 'eq' .
        /// - IsParallel - Filter by the IsParallel boolean flag. Supported
        /// operations are 'eq'.
        /// - ProjectLanguages - Filter for documents applicable to a project
        /// with the specified language pair.  Language pair should be
        /// specified with a '-&amp;gt;' between the languages. Supported
        /// operations are 'eq'.
        /// &lt;br /&gt;&lt;br /&gt;
        /// Only basic 'and' operator is supported between different field
        /// filters. Also no nested conditions are supported.
        /// &lt;br /&gt;
        /// Example: /api/texttranslator/v1/documents?$filter=substringof(Name,
        /// 'Document 1') and documentType eq 'training' and languageCode eq
        /// 'de' and isParallel eq false
        /// &lt;br /&gt;
        /// Example with ProjectLanguages -
        /// /api/texttranslator/v1/documents?$filter=projectLanguage eq
        /// 'en-&amp;gt;de'
        /// &lt;br /&gt;&lt;br /&gt;
        /// To sort the returned results please use the standard OData $orderby
        /// syntax. Supported fields are:
        /// - name- document name to order by.
        /// - createdDate- document created date to order by.
        /// - documentType- document type to order by -
        /// Training,Testing,Tuning, Phrase Dictionary and Sentence Dictionary
        /// in ascending or descending.
        /// &lt;br /&gt;&lt;br /&gt;
        /// Only one orderBy field can be used at a time, else a 404  will be
        /// returned.
        /// &lt;br /&gt;
        /// Example with Name : /api/texttranslator/v1/documents?$orderby=name
        /// desc
        /// &lt;br /&gt;
        /// Example with CreatedDate:
        /// /api/texttranslator/v1/documents?$orderby=createdDate asc
        /// &lt;br /&gt;
        /// Example with DocumentType:
        /// /api/texttranslator/v1/documents?$orderby=documentType desc
        /// </remarks>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='pageIndex'>
        /// Index of the page.
        /// </param>
        /// <param name='workspaceId'>
        /// Id of the workspace
        /// </param>
        /// <param name='includeAllDocumentsFields'>
        /// Whether or not to return the optional field 'AllDocuments'
        /// that includes basic information about documents outside the
        /// pagination range.
        /// </param>
        /// <param name='prioritizeModel'>
        /// When paginating results, ensures that documents that are part of
        /// this model
        /// are listed before all other documents. If both prioritizeModel and
        /// orderby are provided, prioritzeModel will
        /// be ignored.
        /// </param>
        /// <param name='filter'>
        /// The OData $filter parameter.
        /// </param>
        /// <param name='orderby'>
        /// The OData $orderby parameter.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DocumentsResponse>> GetDocumentsWithHttpMessagesAsync(string authorization, int pageIndex, string workspaceId, bool? includeAllDocumentsFields = default(bool?), long? prioritizeModel = default(long?), string filter = default(string), string orderby = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the requested document
        /// </summary>
        /// <param name='id'>
        /// The Id of the document for which details are requested
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DocumentInfo>> ApiTexttranslatorV10DocumentsByIdGetWithHttpMessagesAsync(long id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete the document
        /// </summary>
        /// <param name='id'>
        /// The id of the document to be deleted
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiTexttranslatorV10DocumentsByIdDeleteWithHttpMessagesAsync(long id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the files for the document
        /// </summary>
        /// <param name='id'>
        /// The Id of the document for which the files information is requested
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TextTranslatorModelsTextTranslatorFileInfo>>> ApiTexttranslatorV10DocumentsByIdFilesGetWithHttpMessagesAsync(long id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the content of the requested file
        /// </summary>
        /// <param name='id'>
        /// The document identifier.
        /// </param>
        /// <param name='language'>
        /// The language.
        /// </param>
        /// <param name='authorization'>
        /// The access token
        /// </param>
        /// <param name='pageIndex'>
        /// Index of the page.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TextTranslatorModelsResponseTextTranslatorFileContentResponse>> ApiTexttranslatorV10DocumentsByIdFilesByLanguageContentsGetWithHttpMessagesAsync(long id, string language, string authorization, int pageIndex, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Downloads a zip containing the file(s) belonging to this document
        /// </summary>
        /// <param name='id'>
        /// The Id of the document for which files are requested
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MicrosoftAspNetCoreMvcVirtualFileResult>> ApiTexttranslatorV10DocumentsByIdExportGetWithHttpMessagesAsync(long id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload files for processing. Documents are created asynchronously.
        /// Upload status can be checked using the returned job id
        /// </summary>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='files'>
        /// Gets or sets the uploaded Files. Provide multiple values in new lines (at least one required).
        /// </param>
        /// <param name='documentDetails'>
        /// Gets or sets the document details with their files that are being
        /// uploaded.
        /// multipart/form-data type does not serialize/de-serialize to
        /// anything other than file or string
        /// This will be parsed in the controller to type
        /// IEnumerable[ImportDocumentRequestDetails]
        /// </param>
        /// <param name='workspaceId'>
        /// Workspace id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ImportFilesResponse>> ImportDocumentsWithHttpMessagesAsync(string authorization, string files, string documentDetails, string workspaceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the status of the document import
        /// </summary>
        /// <remarks>
        /// ### REMARKS ###
        /// Document import status can be filtered using standard OData $filter
        /// syntax. Supported fields and operations:
        /// - FileName - Filters by document name. Supported operations are
        /// 'eq' and 'substringof'.
        /// - LanguageCode - Filters by language code. Supported operation is
        /// 'eq'.
        /// - Status - Filters by the import status. Supported operation is
        /// 'eq', 'lt' (less than), 'gt' (greater than).
        /// &lt;br /&gt;&lt;br /&gt;
        /// Only basic 'and' operator is supported between different field
        /// filters, and nested conditions are not supported.
        /// &lt;br /&gt;&lt;br /&gt;
        /// Example:
        /// /api/texttranslator/v1/documents/import/jobs/{jobId}?$filter=substringof(FileName,
        /// 'Document 1') and languageCode eq 'de' and status lt '254'
        /// &lt;br /&gt;
        /// </remarks>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='jobId'>
        /// The job identifier
        /// </param>
        /// <param name='pageIndex'>
        /// Index of the page. If not provided, defaults to returning the first
        /// page.
        /// </param>
        /// <param name='limit'>
        /// Limits the number of items per page. If not provided, defaults to
        /// 10.
        /// </param>
        /// <param name='filter'>
        /// The OData $filter parameter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ImportJobStatusResponse>> GetImportJobsByJobIdWithHttpMessagesAsync(string authorization, System.Guid jobId, int pageIndex, int limit, string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the status of all past document imports
        /// </summary>
        /// <remarks>
        /// ### REMARKS ###
        /// Document import status can be filtered using standard OData $filter
        /// syntax. Supported fields and operations:
        /// - Name - Filters by document name. Supported operations are 'eq'
        /// and 'substringof'.
        /// - LanguageCode - Filters by language code. Supported operation is
        /// 'eq'.
        /// - Status - Filters by the import status. Supported operations are
        /// 'eq', 'lt' (less than), 'gt' (greater than).
        /// - UploadDateStart - Supported operation is 'ge' (greater than or
        /// equal to)
        /// - UploadDateEnd - Supported operation is 'le' (less than or equal
        /// to)
        /// &lt;br /&gt;&lt;br /&gt;
        /// Only basic 'and' operator is supported between different field
        /// filters, and nested conditions are not supported.
        /// &lt;br /&gt;&lt;br /&gt;
        /// Example:
        /// /api/texttranslator/v1/documents/import/jobs/all?$filter=substringof(Name,
        /// 'Document 1') and languagePair eq 'de,en' and status lt '254'
        /// &lt;br /&gt;
        /// </remarks>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='workspaceId'>
        /// Id for the workspace to fetch the jobs from.
        /// </param>
        /// <param name='pageIndex'>
        /// Index of the page. If not provided, defaults to returning the first
        /// page.
        /// </param>
        /// <param name='limit'>
        /// Limits the number of items per page. If not provided, defaults to
        /// 10.
        /// </param>
        /// <param name='filter'>
        /// The OData $filter parameter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TextTranslatorModelsResponseTextTranslatorImportAllJobsStatusResponse>> ApiTexttranslatorV10DocumentsImportJobsAllGetWithHttpMessagesAsync(string authorization, string workspaceId, int pageIndex, int limit, string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Downloads a zip containing Documents file(s) selected from project
        /// or all documents for model
        /// </summary>
        /// <param name='documentIds'>
        /// The Ids of the document for which files are requested
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MicrosoftAspNetCoreMvcVirtualFileResult>> ApiTexttranslatorV10DocumentsDownloadGetWithHttpMessagesAsync(IList<long?> documentIds, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of languages supported by Translator Studio
        /// </summary>
        /// <param name='authorization'>
        /// The auth token for the system
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TextTranslatorModelsTextTranslatorLanguage>>> ApiTexttranslatorV10LanguagesGetWithHttpMessagesAsync(string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of language pairs are supported by the text
        /// translator for transalation.
        /// </summary>
        /// <param name='authorization'>
        /// The auth token for the system
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<LanguagePair>>> GetSupportedLanguagePairsWithHttpMessagesAsync(string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the model details.
        /// </summary>
        /// <remarks>
        /// ### REMARKS ###
        /// To sort the returned results please use the standard OData $orderby
        /// syntax. Supported fields are:
        /// - sourceSentences - Orders documents returned by number of source
        /// sentences.
        /// - targetSentences - Orders documents returned by number of target
        /// sentences.
        /// - alignedSentences - Orders documents returned by number of aligned
        /// sentences.
        /// - usedSentences - Orders documents returned by number of used
        /// sentences.
        /// &lt;br /&gt;&lt;br /&gt;
        /// Only one orderBy field can be used at a time, else a 404  will be
        /// returned.
        /// &lt;br /&gt;
        /// Example with SourceSentences :
        /// /api/texttranslator/v1/documents?$orderby=sourceSentences desc
        /// &lt;br /&gt;
        /// Example with TargetSentences :
        /// /api/texttranslator/v1/documents?$orderby=targetSentences asc
        /// &lt;br /&gt;
        /// Example with AlignedSentences:
        /// /api/texttranslator/v1/documents?$orderby=alignedSentences desc
        /// &lt;br /&gt;
        /// Example with UsedSentences:
        /// /api/texttranslator/v1/documents?$orderby=usedSentences asc
        /// </remarks>
        /// <param name='id'>
        /// The Id of the requested model.
        /// </param>
        /// <param name='authorization'>
        /// Access token.
        /// </param>
        /// <param name='orderby'>
        /// The OData $orderby parameter.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ModelInfo>> GetModelWithHttpMessagesAsync(long id, string authorization, string orderby = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the model.
        /// </summary>
        /// <remarks>
        /// ### REMARKS ###
        /// Documents can only be added or removed from the model if it is in a
        /// draft state.
        /// </remarks>
        /// <param name='id'>
        /// The id of the model to update.
        /// </param>
        /// <param name='model'>
        /// The updated model object.
        /// </param>
        /// <param name='authorization'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TextTranslatorModelsResponseTextTranslatorModelUpdateResponse>> ApiTexttranslatorV10ModelsByIdPutWithHttpMessagesAsync(long id, TextTranslatorModelsRequestTextTranslatorModelUpdateRequest model, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the model.
        /// </summary>
        /// <param name='id'>
        /// The Id of the model to delete.
        /// </param>
        /// <param name='authorization'>
        /// Access token.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteModelWithHttpMessagesAsync(long id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new model.
        /// </summary>
        /// <remarks>
        /// ### REMARKS ###
        /// The field 'isAutoTrain' defaults to true if not set. If it is set
        /// to false, it
        /// creates the model in a draft state.
        /// </remarks>
        /// <param name='modelRequest'>
        /// The model to be added.
        /// </param>
        /// <param name='authorization'>
        /// Access token.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateModelWithHttpMessagesAsync(CreateModelRequest modelRequest, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Train a model.
        /// </summary>
        /// <param name='id'>
        /// The Id of the model to train.
        /// </param>
        /// <param name='authorization'>
        /// The authorization.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> TrainModelWithHttpMessagesAsync(long id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deploy or undeploy a model.
        /// </summary>
        /// <param name='id'>
        /// The id of the model to deploy or undeploy.
        /// </param>
        /// <param name='authorization'>
        /// The authorization.
        /// </param>
        /// <param name='requestedRegionalDeployments'>
        /// An array of regions to be deployed/undeployed
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeployModelWithHttpMessagesAsync(long id, string authorization, IList<ModelRegionStatus> requestedRegionalDeployments, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of tests for the model.
        /// </summary>
        /// <remarks>
        /// ### REMARKS ###
        /// Tests can be filtered using standard OData $filter syntax.
        /// Supported fields and operations:
        /// - TestName - test name to filter by. Supported operations are 'eq'
        /// and 'substringof'.
        /// - Status - Supported operations are 'eq'.
        /// &lt;br /&gt;&lt;br /&gt;
        /// Only basic 'and' operator is supported between different field
        /// filters. Also no nested conditions are supported.
        /// &lt;br /&gt;
        /// Example:
        /// /api/texttranslator/v1/models/{id}/tests?$filter=substringof(testName,
        /// 'Test 1') and status eq 'Complete'
        /// </remarks>
        /// <param name='id'>
        /// The Id of the model to which tests belong.
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='pageIndex'>
        /// The page index. Default is 1.
        /// </param>
        /// <param name='filter'>
        /// The OData $filter parameter.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TextTranslatorModelsResponseTextTranslatorTestsResponse>> ApiTexttranslatorV10ModelsByIdTestsGetWithHttpMessagesAsync(long id, string authorization, int pageIndex, string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Accepts a request to undeploy a Hub model deployed to API V3.
        /// </summary>
        /// <param name='id'>
        /// Id of the corresponding model in Custom Translator with status Hub
        /// Deployed.
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiTexttranslatorV10ModelsByIdUndeployhubmodelDeleteWithHttpMessagesAsync(long id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of projects.
        /// </summary>
        /// <remarks>
        /// ### REMARKS ###
        /// Projects can be filtered using standard OData $filter syntax.
        /// Supported fields and operations:
        /// - Name- project name to filter by. Supported operations are 'eq'
        /// and 'substringof'.
        /// - SourceLanguage- Supported operations are 'eq'.
        /// - TargetLanguage- Supported operations are 'eq'.
        /// - Category- Supported operations are 'eq'.
        /// &lt;br /&gt;&lt;br /&gt;
        /// Only basic 'and' operator is supported between different field
        /// filters. Also no nested conditions are supported.
        /// &lt;br /&gt;
        /// Example: /api/texttranslator/v1/projects?$filter=substringof(name,
        /// 'Project 1') and status eq 'Deployed' and targetLanguage eq 'de'
        /// &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
        /// To sort the returned results please use the standard OData $orderby
        /// syntax. Supported fields are:
        /// - name- project name to order by.
        /// - createdDate- project created date to order by.
        /// &lt;br /&gt;&lt;br /&gt;
        /// Only one orderBy field can be used at a time, else a 404  will be
        /// returned.
        /// &lt;br /&gt;
        /// Example with Name : /api/texttranslator/v1/projects?$orderby=name
        /// desc
        /// &lt;br /&gt;
        /// Example with CreatedDate :
        /// /api/texttranslator/v1/projects?$orderby=createdDate asc
        /// </remarks>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='workspaceId'>
        /// The id of the workspace.
        /// </param>
        /// <param name='pageIndex'>
        /// The page index. Default is 1.
        /// </param>
        /// <param name='filter'>
        /// The OData $filter parameter.
        /// </param>
        /// <param name='orderby'>
        /// The OData $orderby parameter.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectsResponse>> GetProjectsWithHttpMessagesAsync(string authorization, string workspaceId, int pageIndex, string filter = default(string), string orderby = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a project.
        /// </summary>
        /// <param name='project'>
        /// The project to create
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='workspaceId'>
        /// Workspace id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateProjectWithHttpMessagesAsync(CreateProjectData project, string authorization, string workspaceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the project specified by Id.
        /// </summary>
        /// <param name='id'>
        /// The Id for the project for which details are requested.
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectInfo>> GetProjectByIdWithHttpMessagesAsync(System.Guid id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the project.
        /// </summary>
        /// <param name='id'>
        /// The id of the project to update.
        /// </param>
        /// <param name='project'>
        /// The project to update
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectInfo>> ApiTexttranslatorV10ProjectsByIdPutWithHttpMessagesAsync(System.Guid id, TextTranslatorModelsRequestTextTranslatorProjectUpdateRequest project, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete the current project
        /// </summary>
        /// <param name='id'>
        /// Id of the project
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteProjectWithHttpMessagesAsync(System.Guid id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all the Models for the given project.
        /// </summary>
        /// <remarks>
        /// ### REMARKS ###
        /// Models can be filtered using standard OData $filter syntax.
        /// Supported fields and operations:
        /// - ModelName - model name to filter by. Supported operations are
        /// 'eq' and 'substringof'.
        /// - DocumentType - Document type to filter. Supported operations are
        /// 'eq'.
        /// &lt;br /&gt;&lt;br /&gt;
        /// Only basic 'and' operator is supported between different field
        /// filters. Also no nested conditions are supported.
        /// &lt;br /&gt;
        /// Example:
        /// /api/texttranslator/v1/projects/{id}/models?$filter=substringof(modelName,
        /// 'Model 1') and documentType eq 'training'
        /// &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
        /// To sort the returned results please use the standard OData $orderby
        /// syntax. Supported fields are:
        /// - name - Model name to order by.
        /// - modifiedDate - Model modified date to order by.
        /// &lt;br /&gt;&lt;br /&gt;
        /// Only one orderBy field can be used at a time, else a 404  will be
        /// returned.
        /// &lt;br /&gt;
        /// Example with Name : /api/texttranslator/v1/documents?$orderby=name
        /// desc
        /// &lt;br /&gt;
        /// Example with ModifiedDate:
        /// /api/texttranslator/v1/documents?$orderby=modifiedDate asc
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='authorization'>
        /// </param>
        /// <param name='pageIndex'>
        /// The page index. Default is 1.
        /// </param>
        /// <param name='filter'>
        /// The OData $filter parameter.
        /// </param>
        /// <param name='orderby'>
        /// The OData $orderby parameter.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ModelsResponse>> GetProjectsByIdModelsWithHttpMessagesAsync(System.Guid id, string authorization, int pageIndex, string filter = default(string), string orderby = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of regions.
        /// </summary>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TextTranslatorDALRegion>>> ApiTexttranslatorV10RegionsGetWithHttpMessagesAsync(string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the translator text subscription for this workspace.
        /// </summary>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='workspaceId'>
        /// Workspace id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TextTranslatorModelsTextTranslatorSubscriptionResponse>> ApiTexttranslatorV10SubscriptionsGetWithHttpMessagesAsync(string authorization, string workspaceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a subscription key
        /// </summary>
        /// <param name='subscription'>
        /// The subscription
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='workspaceId'>
        /// Workspace to add the subscription to
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiTexttranslatorV10SubscriptionsPutWithHttpMessagesAsync(Subscription subscription, string authorization, string workspaceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a subscription key.
        /// </summary>
        /// <param name='subscription'>
        /// The subscription
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='workspaceId'>
        /// Workspace to add the subscription to
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiTexttranslatorV10SubscriptionsPostWithHttpMessagesAsync(Subscription subscription, string authorization, string workspaceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a subscription key.
        /// </summary>
        /// <param name='workspaceId'>
        /// Workspace id to delete the subscription key from
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiTexttranslatorV10SubscriptionsDeleteWithHttpMessagesAsync(string workspaceId, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the translator text subscription regions.
        /// </summary>
        /// <param name='authorization'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BillingRegions>>> GetBillingRegionsWithHttpMessagesAsync(string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets details of a specific test.
        /// </summary>
        /// <param name='id'>
        /// The test identifier.
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TextTranslatorModelsTextTranslatorTestInfo>> ApiTexttranslatorV10TestsByIdGetWithHttpMessagesAsync(long id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Export the test resuls as a zip file.
        /// </summary>
        /// <param name='id'>
        /// The test identifier.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MicrosoftAspNetCoreMvcVirtualFileResult>> ApiTexttranslatorV10TestsByIdExportPostWithHttpMessagesAsync(long id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets aligned source, ref, and MT sentences.
        /// </summary>
        /// <param name='id'>
        /// The test identifier.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TextTranslatorModelsResponseTextTranslatorTestEntriessResponse>> ApiTexttranslatorV10TestsByIdResultsGetWithHttpMessagesAsync(long id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Whether or not the user is a current user of Custom Translator.
        /// </summary>
        /// <param name='authorization'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiTexttranslatorV10UsersIsNewUserGetWithHttpMessagesAsync(string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets user as an existing user
        /// </summary>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiTexttranslatorV10UsersSetExistingUserPutWithHttpMessagesAsync(string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of workspaces that the user has access to.
        /// </summary>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<List<WorkspaceInfo>>> GetWorkspacesWithHttpMessagesAsync(string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new workspace
        /// </summary>
        /// <param name='newWorkspace'>
        /// Subscription and workspace name
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateWorkspaceWithHttpMessagesAsync(CreateWorkspaceData newWorkspace, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the information for a specific workspace.
        /// </summary>
        /// <param name='id'>
        /// The id for the workspace
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<WorkspaceInfo>> GetWorkspaceByIdWithHttpMessagesAsync(string id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a workspace
        /// </summary>
        /// <param name='id'>
        /// The id for the workspace
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<WorkspaceInfo>> DeleteWorkspaceWithHttpMessagesAsync(string id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Changes the name of a workspace
        /// </summary>
        /// <param name='name'>
        /// The new name
        /// </param>
        /// <param name='id'>
        /// The id for the workspace
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiTexttranslatorV10WorkspacesByIdNamePutWithHttpMessagesAsync(TextTranslatorModelsRequestTextTranslatorWorkspaceNameRequest name, string id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of users with access to a specific workspace
        /// </summary>
        /// <param name='id'>
        /// The id for the workspace
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TextTranslatorModelsResponseTextTranslatorWorkspaceUsersResponse>> ApiTexttranslatorV10WorkspacesByIdUsersGetWithHttpMessagesAsync(string id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds users to the workspace. If the user already has permissions to
        /// the
        /// workspace, this  will update their level of permissions to whatever
        /// is
        /// specified.
        /// </summary>
        /// <param name='users'>
        /// The users to be added
        /// </param>
        /// <param name='id'>
        /// The id for the workspace
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiTexttranslatorV10WorkspacesByIdUsersPostWithHttpMessagesAsync(IList<TextTranslatorModelsRequestTextTranslatorWorkspacePermissionInfo> users, string id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes a users permissions to the workspace.
        /// </summary>
        /// <param name='id'>
        /// The id for the workspace
        /// </param>
        /// <param name='userId'>
        /// The user to be deleted
        /// </param>
        /// <param name='authorization'>
        /// Access token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiTexttranslatorV10WorkspacesByIdUsersByUserIdDeleteWithHttpMessagesAsync(string id, long userId, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the summary for all migration operations on the current
        /// workspace
        /// </summary>
        /// <param name='id'>
        /// Workspace Id
        /// </param>
        /// <param name='authorization'>
        /// Authorization token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiTexttranslatorV10WorkspacesByIdMigrationGetWithHttpMessagesAsync(string id, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the details of the migration operation in a zip file.
        /// </summary>
        /// <param name='id'>
        /// The Id of the workspace
        /// </param>
        /// <param name='migrationId'>
        /// The migration id for which details are served.
        /// </param>
        /// <param name='authorization'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MicrosoftAspNetCoreMvcVirtualFileResult>> ApiTexttranslatorV10WorkspacesByIdExportByMigrationIdPostWithHttpMessagesAsync(string id, string migrationId, string authorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the authorization token.
        /// </summary>
        /// <param name='apikey'>
        /// Account key
        /// </param>
        /// <param name='region'>
        /// Region for the key
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        Task<HttpOperationResponse<string>> AuthTokenGetWithHttpMessagesAsync(string apikey, string region, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
